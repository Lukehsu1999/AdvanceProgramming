#include<iostream>
#include<algorithm>
#include<vector>
#include<math.h>
using namespace std;

//global variables
int primelist[1400];
int p_cnt = 0;

//global function
void build_primelist();
bool is_prime(int n,int pn);

int main() {
	build_primelist();
	int n;
	int pn = p_cnt;
	//cout << pn << endl;
	while (cin >> n) {
		if (n % 2 == 1) {
			if (is_prime(n - 2,pn)) {
				cout << n << " is the sum of 2 and " << n - 2 <<"."<< endl;
			}
			else {
				cout << n << " is not the sum of two primes!" << endl;
			}
		}
		else {
			bool success = false;
			for (int i = n / 2-1; i >= 0; i--) {
				if (is_prime(i,pn) && is_prime(n - i,pn)) {
					cout << n << " is the sum of " << i << " and " << n - i <<"."<< endl;
					success = true;
					break;
				}
			}
			if (success == false) {
				cout << n << " is not the sum of two primes!" << endl;
			}
		}
	}
}
void build_primelist() {
	primelist[0] = 2;
	primelist[1] = 3;
	primelist[2] = 5;
	p_cnt = 3;
	for (int i = 6; i <= 10000; i++) {
		bool isprime = true;
		if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0) {
			isprime = false;
		}
		else {
			for (int j = 0; j < p_cnt && primelist[j] <= sqrt(i); j++) {
				if (i % primelist[j] == 0) {
					isprime = false;
					break;
				}
			}
		}
		if (isprime) {
			primelist[p_cnt] = i;
			p_cnt++;
		}
	}
}
bool is_prime(int n, int pn) {
	if (n < 2) {
		return false;
	}
	int n_sqrt = sqrt(n);
	for (int i = 0; i<pn&&primelist[i] <= n_sqrt; i++) {
		if (n % primelist[i] == 0) {
			return false;
		}
	}
	return true;
}
