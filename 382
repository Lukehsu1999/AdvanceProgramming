#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#define MAX_V 210
#define INF 2147483647

using namespace std;

struct edge { int to, cap, rev; };

//global variable
int N, M, B, D;
int Total_V;
vector<edge>G[MAX_V];
int level[MAX_V]; //distance to s
int iter[MAX_V]; //record the search position

//global functions
void add_edge(int from, int to, int cap);
void bfs(int s);
int dfs(int v, int t, int f);
int max_flow(int s, int t);
void reset(int arr[], int value, int size);

int main() {
	while (cin >> N) {
		Total_V = 2 * N + 10;
		/*
		s: node 0
		node_in: node 1-N
		node_out: node (N+1)-2N
		t: node 2N+1
		*/
		int s = 0;
		int t = 2 * N + 1;

		//PART 1: Initialize
		for (int i = 0; i <Total_V; i++) {
			G[i].clear();
		}
		reset(iter, 0, Total_V);
		reset(level, -1, Total_V);

		//PART 2: input Regulator capacity
		for (int i = 1; i <= N; i++) {
			int cap;
			cin >> cap;
			add_edge(i, N + i, cap);
		}

		//PART 3: input link
		cin >> M;
		for (int i = 0; i < M; i++) {
			int a, b, w;
			cin >> a >> b >> w;
			add_edge(a+N, b, w);
		}

		//PART 4: entry and exit
		cin >> B >> D;
		for (int i = 0; i < B; i++) {
			int entry;
			cin >> entry;
			add_edge(s, entry, INF);
		}
		for (int j = 0; j < D; j++) {
			int exit;
			cin >> exit;
			add_edge(exit + N, t, INF);
		}

		//PART 4: max flow
		cout << max_flow(s, t) << endl;
	}
}

void add_edge(int from, int to, int cap) {
	edge forward;
	forward.to = to;
	forward.cap = cap;
	forward.rev = G[to].size();
	G[from].push_back(forward);
	edge backward;
	backward.to = from;
	backward.cap = 0;
	backward.rev = G[from].size() - 1;
	G[to].push_back(backward);
}

void bfs(int s) {
	reset(level, -1, Total_V);
	queue<int>que;
	level[s] = 0;
	que.push(s);
	while (!que.empty()) {
		int v = que.front();
		que.pop();
		for (int i = 0; i < G[v].size(); i++) {
			edge& e = G[v][i];
			if (e.cap > 0 && level[e.to] < 0) {
				level[e.to] = level[v] + 1;
				que.push(e.to);
			}
		}
	}
}

int dfs(int v, int t, int f) {
	if (v == t) {
		return f;
	}
	for (int i = iter[v]; i < G[v].size(); i++) {
		edge& e = G[v][i];
		if (e.cap > 0 && level[v] < level[e.to]) {
			int d = dfs(e.to, t, min(f, e.cap));
			if (d > 0) {
				e.cap -= d;
				G[e.to][e.rev].cap += d;
				return d;
			}
		}
	}
	return 0;
}

int max_flow(int s, int t) {
	int flow = 0;
	for (;;) {
		bfs(s);
		if (level[t] < 0)return flow;
		reset(iter, 0, Total_V);
		int f;
		while ((f = dfs(s, t, INF)) > 0) {
			flow += f;
		}
	}
	return flow;
}

void reset(int arr[], int value, int size) {
	for (int i = 0; i < size; i++) {
		arr[i] = value;
	}
}
