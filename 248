#include<iostream>
#include<algorithm>

using namespace std;

struct point {
	int x;
	int y;
	point() {
		x = 0;
		y = 0;
	}
	point(int n, int m) {
		x = n;
		y = m;
	}
	bool same(point A) {
		return (A.x == x) && (A.y == y);
	}
};
struct vec {
	int x_v;
	int y_v;
	vec(point A, point B) {
		x_v = B.x - A.x;
		y_v = B.y - A.y;
	}
};
struct segment {
	point start;
	point end;
	segment() {
		start = point(0, 0);
		end = point(0, 0);
	}
	segment(point s, point e) {
		start = s;
		end = e;
	}
};
struct rectangle {
	point left_top;
	point left_bottom;
	point right_top;
	point right_bottom;

	rectangle(point l_t, point r_b) {
		left_top = l_t;
		left_bottom.x = l_t.x;
		left_bottom.y = r_b.y;
		right_top.x = r_b.x;
		right_top.y = l_t.y;
		right_bottom = r_b;
	}
};

//global function
int cross_product(vec A, vec B);
int modified_cross_product(vec A, vec B);
int dot_product(vec A, vec B);
bool withinlinesegment(point A, point B, point P); //check whether P is within AB, P not A or B
bool intersect(segment A, segment B);
bool seg_rect_intersect(segment s, rectangle r);

//global variable
segment Allseg[110];

int main() {
	/*
	point A(0, 0);
	point a(6, 0);
	point B(0, 0);
	point b(6, 0);
	segment sA(A, a);
	segment sB(B, b);
	cout << intersect(sA, sB) << endl;
	*/
	int N;
	cin >> N;
	for (int z = 0; z < N; z++) {
		int xstart, ystart, xend, yend, xleft, ytop, xright, ybottom;
		cin >> xstart >> ystart >> xend >> yend >> xleft >> ytop >> xright >> ybottom;
		if (xleft > xright) {
			int temp = xleft;
			xleft = xright;
			xright = temp;
		}
		if (ybottom > ytop) {
			int temp = ybottom;
			ybottom = ytop;
			ytop = temp;
		}
		point seg_s(xstart, ystart);
		point seg_e(xend, yend);
		segment target_seg(seg_s, seg_e);
		point l_t(xleft, ytop);
		point r_b(xright, ybottom);
		rectangle target_rec(l_t, r_b);
		if (seg_rect_intersect(target_seg,target_rec)) {
			cout << "T" << endl;
		}
		else {
			cout << "F" << endl;
		}
	}
}


int cross_product(vec A, vec B) {
	return A.x_v * B.y_v - A.y_v * B.x_v;
}
int modified_cross_product(vec A, vec B) {
	int res = A.x_v * B.y_v - A.y_v * B.x_v;
	if (res < 0) {
		return -1;
	}
	else if (res > 0) {
		return 1;
	}
	else {
		return 0;
	}
}
int dot_product(vec A, vec B) { //note if A=B, the dot product will be the square of A's magnitude
	return A.x_v * B.x_v + A.y_v * B.y_v;
}
bool withinlinesegment(point A, point B, point P) {
	vec BA = vec(B, A);
	vec PA = vec(P, A);
	//check if point overlap
	if (A.x == P.x && A.y == P.y) {
		return true;
	}
	if (B.x == P.x && B.y == P.y) {
		return true;
	}
	//check if within
	if (cross_product(BA, PA) == 0) { //align
		if (dot_product(BA, PA) > 0 && dot_product(BA, PA) < dot_product(BA, BA)) { //P within AB
			return true;
		}
	}
	return false;
}


bool intersect(segment A, segment B) {
	bool intersect = true;

	//check B and b are on different side of A
	vec Aa(A.start, A.end);
	vec aB(A.end, B.start);
	vec ab(A.end, B.end);
	if (modified_cross_product(Aa, aB) * modified_cross_product(Aa, ab) > 0) {
		intersect = false;
		return false;
	}

	//check A and a are on different side of B
	vec Bb(B.start, B.end);
	vec ba(B.end, A.end);
	vec bA(B.end, A.start);
	if (modified_cross_product(Bb, ba) * modified_cross_product(Bb, bA) > 0) {
		intersect = false;
		return false;
	}

	//check special case: A---a ... B---b
	/*
	case:
	A---a ... B---b
	A---a ... b---B
	a---A ... B---b
	a---A ... b---B

	what if A---a(b)---B ? nw <

	*/
	if (cross_product(Aa, Bb) == 0) { //align
		if (withinlinesegment(A.start, B.start, A.end) && withinlinesegment(A.end, B.end, B.start)) {
			return false;
		}
		if (withinlinesegment(A.start, B.end, A.end) && withinlinesegment(A.end, B.start, B.end)) {
			return false;
		}
		if (withinlinesegment(A.end, B.start, A.start) && withinlinesegment(A.start, B.end, B.start)) {
			return false;
		}
		if (withinlinesegment(A.end, B.end, A.start) && withinlinesegment(A.start, B.start, B.end)) {
			return false;
		}
	}

	return true;
}
bool seg_rect_intersect(segment s, rectangle r) {
	//case: rectangle is just a dot
	if ((r.left_top.x== r.right_bottom.x)&& (r.left_top.y == r.right_bottom.y)) {
		if (withinlinesegment(s.start, s.end, r.left_top)) {
			return true;
		}
		return false;
	}
	//case: segment is entirely in rectangle
	if (s.start.x <= r.right_bottom.x && s.start.x >= r.left_bottom.x && s.start.y <= r.right_top.y && s.start.y >= r.right_bottom.y) {
		if (s.end.x <= r.right_bottom.x && s.end.x >= r.left_bottom.x && s.end.y <= r.right_top.y && s.end.y >= r.right_bottom.y) {
			return true;
		}
	}
	//case: segment intersect with one of the four sides
	segment top(r.left_top, r.right_top);
	segment bottom(r.left_bottom, r.right_bottom);
	segment left(r.left_top, r.left_bottom);
	segment right(r.right_top, r.right_bottom);
	if (intersect(s, top) || intersect(s, bottom) || intersect(s, left) || intersect(s, right)) {
		return true;
	}

	return false;
}
