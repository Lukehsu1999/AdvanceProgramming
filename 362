#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#define MAX_V 230
#define INF 2147483647

using namespace std;

struct edge { int to, cap, rev; };

//global variable
int L, W, N, d;
vector<edge>G[MAX_V];
int level[MAX_V]; //distance to s
int iter[MAX_V]; //record the search position
int x[MAX_V];
int y[MAX_V];

//global functions
void add_edge(int from, int to, int cap);
void bfs(int s);
int dfs(int v, int t, int f);
int max_flow(int s, int t);
void reset(int arr[], int value, int size);
double dis(int x1, int y1, int x2, int y2);

int main() {
	int case_id = 1;
	while (cin >> L>>W>>N>>d) {
		if ((L || W || N || d) == 0) {
			break;
		}
		/*
		node 0-(N-1): in node
		node N-(2N-1): out node
		(i,i+N) is a pair
		node 2N: source (upperboundary)
		node 2N+1: terminal (lowerboundary)
		*/
		int s = 2*N;
		int t = 2*N+1;

		//PART 1: Initialize
		for (int i = 0; i <= 2*N + 10; i++) {
			G[i].clear();
		}
		reset(iter, 0, 2*N+10);
		reset(level, -1, 2*N + 10);

		//PART 2: input position of defenders
		for (int i = 0; i < N; i++) {
			cin >> x[i] >> y[i];
			//break the node into an edge cause one defender can only tackle once
			add_edge(i, i + N, 1);
		}

		//PART 3: Form edges
		/*
		Unidirectional: S->i ; i-> T
		Bidirectional i->j; j->i
		*/
		for (int i = 0; i < N; i++) {
			//check if touch upperbound
			if ((W - y[i]) <= d) {
				add_edge(s, i, 1);
			}
			//check if touch lowerbound
			if (y[i] <= d) {
				add_edge(i + N, t, 1);
			}
			//check if overlap with other nodes
			for (int j = i + 1; j < N; j++) {
				if (dis(x[i], y[i], x[j], y[j]) <= 2*d) {
					add_edge(i + N, j, 1);
					add_edge(j + N, i, 1);
				}
			}
		}

		//PART 4: max flow
		cout <<"Case "<<case_id++<<": "<< max_flow(s, t) << endl;
	}
}

void add_edge(int from, int to, int cap) {
	edge forward;
	forward.to = to;
	forward.cap = cap;
	forward.rev = G[to].size();
	G[from].push_back(forward);
	edge backward;
	backward.to = from;
	backward.cap = 0;
	backward.rev = G[from].size() - 1;
	G[to].push_back(backward);
}

void bfs(int s) {
	reset(level, -1, 2*N + 10);
	queue<int>que;
	level[s] = 0;
	que.push(s);
	while (!que.empty()) {
		int v = que.front();
		que.pop();
		for (int i = 0; i < G[v].size(); i++) {
			edge& e = G[v][i];
			if (e.cap > 0 && level[e.to] < 0) {
				level[e.to] = level[v] + 1;
				que.push(e.to);
			}
		}
	}
}

int dfs(int v, int t, int f) {
	if (v == t) {
		return f;
	}
	for (int i = iter[v]; i < G[v].size(); i++) {
		edge& e = G[v][i];
		if (e.cap > 0 && level[v] < level[e.to]) {
			int d = dfs(e.to, t, min(f, e.cap));
			if (d > 0) {
				e.cap -= d;
				G[e.to][e.rev].cap += d;
				return d;
			}
		}
	}
	return 0;
}

int max_flow(int s, int t) {
	int flow = 0;
	for (;;) {
		bfs(s);
		if (level[t] < 0)return flow;
		reset(iter, 0, 2*N + 10);
		int f;
		while ((f = dfs(s, t, INF)) > 0) {
			flow += f;
		}
	}
	return flow;
}

void reset(int arr[], int value, int size) {
	for (int i = 0; i < size; i++) {
		arr[i] = value;
	}
}
double dis(int x1, int y1, int x2, int y2) {
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
}
