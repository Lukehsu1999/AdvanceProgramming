#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#define MAX_V 510
#define INF 10000

using namespace std;

struct edge {
	int u;
	int v;
	long long int cost;
};
bool comp(const edge& e1, const edge& e2) {
	return e1.cost < e2.cost;
}

long long int V, E;
int par[MAX_V];
int rk[MAX_V];
vector<edge> es;

//functions related to disjoint set
void init_disjoint_set(int n) {
	for (int i = 0; i < n; i++) {
		rk[i] = 1;
		par[i] = i;
	}
}

int find(int x) {
	if (par[x] == x) {
		return x;
	}
	else {
		return par[x]=find(par[x]);
	}
}

void unite(int x, int y) {
	x = find(x);
	y = find(y);
	if (x == y) {
		return;
	}
	if (rk[x] < rk[y]) {
		par[x] = y;
		rk[y] += rk[x];
	}
	else {
		par[y] = x;
		rk[x]+=rk[y];
	}
}
bool same(int x, int y) {
	x = find(x);
	y = find(y);
	if (x == y) {
		return true;
	}
	return false;
}

void print_es() {
	for (int i = 0; i < es.size(); i++) {
		edge out = es[i];
		cout << out.u << " " << out.v << " " << out.cost << endl;
	}
}

int kruskal() {
	sort(es.begin(), es.end(), comp);
	init_disjoint_set(V + 1);
	int res = 0;
	for (int i = 0; i < es.size(); i++) {
		edge cur = es[i];
		if (!same(es[i].u, es[i].v)) {
			unite(es[i].u, es[i].v);
			res += es[i].cost;
		}
	}
	return res;
}
int main() {
	while (cin >> V >> E) {
		if (V == 0 && E == 0) {
			break;
		}

		//PART 1: Initialize
		es.clear();
		init_disjoint_set(V + 1);

		//PART 2: get the edges
		long long int max_PPA = -92147483647;
		for (int i = 0; i < E; i++) {
			edge new_e;
			cin >> new_e.u >> new_e.v >> new_e.cost;
			//case one: don't need to add into es
			if (new_e.cost < max_PPA) {
				continue;
			}
			//case two: add into es
			else if (new_e.cost == max_PPA) {
				es.push_back(new_e);
			}
			//case three: clear es and add new_e
			else if (new_e.cost > max_PPA) {
				max_PPA = new_e.cost;
				es.clear();
				es.push_back(new_e);
			}
		}
		
		//PART 3: create Disjoint set based on es
		for (int i = 0; i < es.size(); i++) {
			edge e = es[i];
			unite(e.u, e.v);
		}

		int max_Size = 0;
		for (int i = 0; i <= V; i++) {
			if (rk[i] > max_Size) {
				max_Size = rk[i];
			}
		}
		cout << max_Size << endl;
	}
}
